name: Send the Deployment Metadata to API
description: "Send deployment data to a specified API."

inputs:
  cdp_actions_api_token:
    description: "The API token for authentication"
    required: true
  cdp_server_api_url:
    description: "The base URL for the API server"
    required: true
  deployment_batch_data:
    description: "The deployment batch data in YAML format"
    required: true

runs:
  using: "node12"
  steps:
    - name: Install dependencies
      run: |
        npm install node-fetch js-yaml

    - name: Parse YAML and send deployment to API
      run: |
        const fetch = require('node-fetch');
        const yaml = require('js-yaml');

        const { cdp_actions_api_token, cdp_server_api_url, deployment_batch_data } = process.env;

        async function sendDeploymentData({
          cdpActionsApiToken,
          cdpServerApiUrl,
          deploymentBatchData,
        }) {
          try {
            // Parse the YAML input data into JSON
            const deploymentBatch = yaml.load(deploymentBatchData);

            // Inject the GitHub run ID into the deployment data
            deploymentBatch.forEach(deployment => {
              deployment.workflowRunId = process.env.GITHUB_RUN_ID;
            });

            // Prepare the payload for the API request
            const payload = JSON.stringify(deploymentBatch);

            // Set up the headers
            const headers = {
              "Content-Type": "application/json",
              "CDP-Actions-API-Token": `Bearer ${cdpActionsApiToken}`,
            };

            // Make the API request
            const response = await fetch(`${cdpServerApiUrl}/api/v1/deployments`, {
              method: "POST",
              headers: headers,
              body: payload,
            });

            if (!response.ok) {
              throw new Error(`Failed to send deployment data: ${response.status} ${response.statusText}`);
            }

            const responseData = await response.json();
            console.log('Deployment data sent successfully:', responseData);

          } catch (error) {
            console.error("Error sending deployment data:", error.message);
            process.exit(1); // Exit with error code to fail the GitHub Actions step
          }
        }

        sendDeploymentData({
          cdpActionsApiToken: '${{ inputs.cdp_actions_api_token }}',
          cdpServerApiUrl: '${{ inputs.cdp_server_api_url }}',
          deploymentBatchData: '${{ inputs.deployment_batch_data }}',
        });